"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BundleReport;

var React = _interopRequireWildcard(require("react"));

var _filesize = _interopRequireDefault(require("filesize"));

var _ink = require("ink");

var _utils = require("@parcel/utils");

var _path = _interopRequireDefault(require("path"));

var emoji = _interopRequireWildcard(require("./emoji"));

var _Table = require("./Table");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const LARGE_BUNDLE_SIZE = 1024 * 1024;

function BundleReport(props) {
  let {
    bundles
  } = (0, _utils.generateBundleReport)(props.bundleGraph);
  let rows = [React.createElement(_Table.Row, {
    key: "first"
  })];

  for (let bundle of bundles) {
    rows.push(React.createElement(_Table.Row, {
      key: `bundle:${bundle.filePath}`
    }, React.createElement(_Table.Cell, null, formatFilename(bundle.filePath || '', {
      cyan: true,
      bold: true
    })), React.createElement(_Table.Cell, {
      align: "right"
    }, React.createElement(_ink.Color, {
      bold: true
    }, prettifySize(bundle.size, bundle.size > LARGE_BUNDLE_SIZE))), React.createElement(_Table.Cell, {
      align: "right"
    }, React.createElement(_ink.Color, {
      green: true,
      bold: true
    }, (0, _utils.prettifyTime)(bundle.time)))));

    for (let asset of bundle.largestAssets) {
      // Add a row for the asset.
      rows.push(React.createElement(_Table.Row, {
        key: `bundle:${bundle.filePath}:asset:${asset.filePath}`
      }, React.createElement(_Table.Cell, null, asset == bundle.largestAssets[bundle.largestAssets.length - 1] ? '└── ' : '├── ', formatFilename(asset.filePath, {})), React.createElement(_Table.Cell, {
        align: "right"
      }, React.createElement(_ink.Color, {
        dim: true
      }, prettifySize(asset.size))), React.createElement(_Table.Cell, {
        align: "right"
      }, React.createElement(_ink.Color, {
        green: true,
        dim: true
      }, (0, _utils.prettifyTime)(asset.time)))));
    } // Show how many more assets there are


    if (bundle.totalAssets > bundle.largestAssets.length) {
      rows.push(React.createElement(_Table.Row, {
        key: `bundleAssetCount:${bundle.filePath}`
      }, React.createElement(_Table.Cell, null, "\u2514\u2500\u2500", ' ', React.createElement(_ink.Color, {
        dim: true
      }, "+ ", bundle.totalAssets - bundle.largestAssets.length, " more assets"))));
    } // If this isn't the last bundle, add an empty row before the next one


    if (bundle !== bundles[bundles.length - 1]) {
      rows.push(React.createElement(_Table.Row, {
        key: `spacer:${bundle.filePath}`
      }));
    }
  }

  return React.createElement(_Table.Table, null, rows.map(r => React.cloneElement(r, {
    key: r.key
  })));
}

function formatFilename(filename, color = {}) {
  let dir = _path.default.relative(process.cwd(), _path.default.dirname(filename));

  return React.createElement(_ink.Box, null, React.createElement(_ink.Color, {
    dim: true
  }, dir + (dir ? _path.default.sep : '')), React.createElement(_ink.Color, color, _path.default.basename(filename)));
}

function prettifySize(size, isLarge) {
  let res = (0, _filesize.default)(size);

  if (isLarge) {
    return React.createElement(_ink.Color, {
      yellow: true
    }, emoji.warning + '  ' + res);
  }

  return React.createElement(_ink.Color, {
    magenta: true
  }, res);
}