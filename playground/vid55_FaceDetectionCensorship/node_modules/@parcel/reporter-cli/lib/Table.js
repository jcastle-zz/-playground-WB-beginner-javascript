"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = Table;
exports.Row = Row;
exports.Cell = Cell;

var React = _interopRequireWildcard(require("react"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _ink = require("ink");

var _graphemeBreaker = require("grapheme-breaker");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function Table({
  children
}) {
  // Measure column widths
  let colWidths = [];
  React.Children.forEach(children, row => {
    let i = 0;
    React.Children.forEach(row.props.children, cell => {
      colWidths[i] = Math.max(colWidths[i] || 0, (0, _graphemeBreaker.countBreaks)(getText(cell)));
      i++;
    });
  });
  return React.Children.map(children, row => {
    return React.cloneElement(row, {
      colWidths
    });
  });
}

function Row(props) {
  let children = props.children; // This is injected above in cloneElement

  let colWidths = (0, _nullthrows.default)(props.colWidths);
  let childArray = React.Children.toArray(children);
  let items = childArray.map((cell, i) => {
    // Add padding between columns unless the alignment is the opposite to the
    // next column and pad to the column width.
    let padding = !childArray[i + 1] || getAlign(childArray[i + 1]) === getAlign(childArray[i]) ? 4 : 0;
    return React.cloneElement(cell, {
      length: colWidths[i] + padding
    });
  });
  return React.createElement(_ink.Box, null, items.length > 0 ? items : ' ');
}

function getAlign(node) {
  return node.props.align || 'left';
}

function Cell(props) {
  // This is injected above in cloneElement
  let length = (0, _nullthrows.default)(props.length);
  let pad = ' '.repeat(length - (0, _graphemeBreaker.countBreaks)(getText({
    props
  })));

  if (props.align === 'right') {
    return React.createElement(React.Fragment, null, React.createElement("span", null, pad), React.createElement(_ink.Box, null, props.children));
  }

  return React.createElement(React.Fragment, null, React.createElement(_ink.Box, null, props.children), React.createElement("span", null, pad));
}

function getText(node) {
  if (typeof node === 'string' || typeof node === 'number') {
    return node.toString();
  }

  if (!node.props) {
    return '';
  }

  let t = '';
  React.Children.forEach(node.props.children, n => {
    t += getText(n);
  });
  return t;
}