"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Log = Log;
exports.Progress = Progress;
exports.ServerInfo = ServerInfo;

var _utils = require("@parcel/utils");

var _ink = require("ink");

var _Spinner = _interopRequireDefault(require("./Spinner"));

var _react = _interopRequireDefault(require("react"));

var Emoji = _interopRequireWildcard(require("./emoji"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Log({
  event
}) {
  switch (event.level) {
    case 'verbose':
    case 'info':
      return _react.default.createElement(InfoLog, {
        event: event
      });

    case 'progress':
      return _react.default.createElement(Progress, {
        event: event
      });

    case 'success':
      return _react.default.createElement(SuccessLog, {
        event: event
      });

    case 'error':
      return _react.default.createElement(ErrorLog, {
        event: event
      });

    case 'warn':
      return _react.default.createElement(WarnLog, {
        event: event
      });
  }

  throw new Error('Unknown log event type');
}

function InfoLog({
  event
}) {
  return _react.default.createElement(_ink.Text, null, event.message);
}

function Stack(_ref) {
  let {
    err,
    emoji,
    color
  } = _ref,
      otherProps = _objectWithoutProperties(_ref, ["err", "emoji", "color"]);

  let {
    message,
    stack
  } = (0, _utils.prettyError)(err, {
    color: true
  });
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", null, _react.default.createElement(_ink.Color, _extends({
    keyword: color
  }, otherProps), emoji, " ", message)), stack != null && stack !== '' ? _react.default.createElement("div", null, _react.default.createElement(_ink.Color, {
    gray: true
  }, stack)) : null);
}

function WarnLog({
  event
}) {
  return _react.default.createElement(Stack, {
    err: event.message,
    emoji: Emoji.warning,
    color: "yellow"
  });
}

function ErrorLog({
  event
}) {
  return _react.default.createElement(Stack, {
    err: event.message,
    emoji: Emoji.error,
    color: "red",
    bold: true
  });
}

function SuccessLog({
  event
}) {
  return _react.default.createElement(_ink.Color, {
    green: true,
    bold: true
  }, Emoji.success, " ", event.message);
}

function Progress({
  event
}) {
  return _react.default.createElement(_ink.Box, null, _react.default.createElement(_ink.Color, {
    gray: true,
    bold: true
  }, _react.default.createElement(_Spinner.default, null), " ", event.message));
}

function ServerInfo({
  options
}) {
  var _options$host;

  let url = `${options.https ? 'https' : 'http'}://${(_options$host = options.host) !== null && _options$host !== void 0 ? _options$host : 'localhost'}:${options.port}`;
  return _react.default.createElement(_ink.Color, {
    bold: true
  }, "Server running at ", _react.default.createElement(_ink.Color, {
    cyan: true
  }, url));
}