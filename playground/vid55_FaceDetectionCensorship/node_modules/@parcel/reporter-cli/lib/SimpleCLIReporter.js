"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._setStdio = _setStdio;
exports._report = _report;
exports.default = void 0;

var _ink = require("ink");

var _plugin = require("@parcel/plugin");

var React = _interopRequireWildcard(require("react"));

var _BundleReport = _interopRequireDefault(require("./BundleReport"));

var _utils = require("@parcel/utils");

var _utils2 = require("./utils");

var _logLevels = _interopRequireDefault(require("./logLevels"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = new _plugin.Reporter({
  report(event, options) {
    _report(event, options);
  }

});

exports.default = _default;
let stdout = process.stdout;
let stderr = process.stderr;
let wroteServerInfo = false; // Exported only for test

function _setStdio(stdoutLike, stderrLike) {
  stdout = stdoutLike;
  stderr = stderrLike;
} // Exported only for test


function _report(event, options) {
  let logLevelFilter = _logLevels.default[options.logLevel || 'info'];

  switch (event.type) {
    case 'buildStart':
      {
        if (options.serve && !wroteServerInfo) {
          var _options$serve$host;

          writeOut(`Server running at ${options.serve.https ? 'https' : 'http'}://${(_options$serve$host = options.serve.host) !== null && _options$serve$host !== void 0 ? _options$serve$host : 'localhost'}:${options.serve.port}`);
          wroteServerInfo = true;
        }

        break;
      }

    case 'buildProgress':
      {
        if (logLevelFilter < _logLevels.default.info) {
          break;
        }

        let message = (0, _utils2.getProgressMessage)(event);

        if (message != null) {
          writeOut(message);
        }

        break;
      }

    case 'buildSuccess':
      if (logLevelFilter < _logLevels.default.info) {
        break;
      }

      writeOut(`Built in ${(0, _utils.prettifyTime)(event.buildTime)}`);

      if (options.mode === 'production') {
        (0, _ink.render)(React.createElement(_BundleReport.default, {
          bundleGraph: event.bundleGraph
        }));
      }

      break;

    case 'buildFailure':
      if (logLevelFilter < _logLevels.default.error) {
        break;
      }

      writeErr(event.error, options.logLevel);
      break;

    case 'log':
      {
        switch (event.level) {
          case 'warn':
          case 'error':
            if (logLevelFilter >= _logLevels.default[event.level]) {
              writeErr(event.message, options.logLevel);
            }

            break;

          case 'info':
          case 'verbose':
          case 'progress':
          case 'success':
            if (logLevelFilter >= _logLevels.default[event.level]) {
              writeOut(event.message);
            }

            break;

          default:
            throw new Error('Unknown log level ' + event.level);
        }
      }
  }
}

function writeOut(message) {
  stdout.write(message + '\n');
}

function writeErr(message, level) {
  let error = (0, _utils.prettyError)(message, {
    color: false
  }); // prefix with parcel: to clarify the source of errors

  writeErrLine('parcel: ' + error.message);

  if (error.stack != null && _logLevels.default[level] >= _logLevels.default.verbose) {
    writeErrLine(error.stack);
  }
}

function writeErrLine(message) {
  stderr.write(message + '\n');
}