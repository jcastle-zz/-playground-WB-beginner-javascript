"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _plugin = require("@parcel/plugin");

var _utils = require("@parcel/utils");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const OPTIONS = {
  minBundles: 1,
  minBundleSize: 30000,
  maxParallelRequests: 5
};

var _default = new _plugin.Bundler({
  // RULES:
  // 1. If dep.isAsync or dep.isEntry, start a new bundle group.
  // 2. If an asset is a different type than the current bundle, make a parallel bundle in the same bundle group.
  // 3. If an asset is already in a parent bundle in the same entry point, exclude from child bundles.
  // 4. If an asset is only in separate isolated entry points (e.g. workers, different HTML pages), duplicate it.
  // 5. If the sub-graph from an asset is >= 30kb, and the number of parallel requests in the bundle group is < 5, create a new bundle containing the sub-graph.
  // 6. If two assets are always seen together, put them in the same extracted bundle
  bundle({
    bundleGraph
  }) {
    let bundleRoots = new Map(); // Step 1: create bundles for each of the explicit code split points.

    bundleGraph.traverse({
      enter: (node, context) => {
        if (node.type !== 'dependency') {
          return _objectSpread({}, context, {
            parentNode: node
          });
        }

        let dependency = node.value;
        let assets = bundleGraph.getDependencyAssets(dependency);
        let resolution = bundleGraph.getDependencyResolution(dependency);

        if (dependency.isEntry || dependency.isAsync || (resolution === null || resolution === void 0 ? void 0 : resolution.isIsolated)) {
          var _dependency$target, _context$bundleGroup;

          let bundleGroup = bundleGraph.createBundleGroup(dependency, (0, _nullthrows.default)((_dependency$target = dependency.target) !== null && _dependency$target !== void 0 ? _dependency$target : context === null || context === void 0 ? void 0 : (_context$bundleGroup = context.bundleGroup) === null || _context$bundleGroup === void 0 ? void 0 : _context$bundleGroup.target));
          let bundleByType = new Map();

          for (let asset of assets) {
            let bundle = bundleGraph.createBundle({
              entryAsset: asset,
              isEntry: asset.isIsolated ? false : Boolean(dependency.isEntry),
              isInline: asset.isInline,
              target: bundleGroup.target
            });
            bundleByType.set(bundle.type, bundle);
            bundleRoots.set(bundle, [asset]);
            bundleGraph.addBundleToBundleGroup(bundle, bundleGroup);
          }

          return {
            bundleGroup,
            bundleByType,
            bundleGroupDependency: dependency,
            parentNode: node
          };
        }

        (0, _assert.default)(context != null);

        for (let asset of assets) {
          (0, _assert.default)(context.parentNode.type === 'asset');
          let parentAsset = context.parentNode.value;

          if (parentAsset.type === asset.type) {
            continue;
          }

          let existingBundle = context.bundleByType.get(asset.type);

          if (existingBundle) {
            // If a bundle of this type has already been created in this group,
            // merge this subgraph into it.
            (0, _nullthrows.default)(bundleRoots.get(existingBundle)).push(asset);
            bundleGraph.createAssetReference(dependency, asset);
          } else {
            let bundle = bundleGraph.createBundle({
              entryAsset: asset,
              target: context.bundleGroup.target,
              isEntry: context.bundleGroupDependency.isEntry,
              isInline: asset.isInline
            });
            context.bundleByType.set(bundle.type, bundle);
            bundleRoots.set(bundle, [asset]);
            bundleGraph.createAssetReference(dependency, asset);
            bundleGraph.addBundleToBundleGroup(bundle, context.bundleGroup);
          }
        }

        return _objectSpread({}, context, {
          parentNode: node
        });
      }
    });

    for (let [bundle, rootAssets] of bundleRoots) {
      for (let asset of rootAssets) {
        bundleGraph.addAssetGraphToBundle(asset, bundle);
      }
    }
  },

  optimize({
    bundleGraph
  }) {
    // Step 2: remove assets that are duplicated in a parent bundle
    bundleGraph.traverseBundles({
      exit(bundle) {
        deduplicateBundle(bundleGraph, bundle);
      }

    }); // Step 3: Find duplicated assets in different bundle groups, and separate them into their own parallel bundles.
    // If multiple assets are always seen together in the same bundles, combine them together.

    let candidateBundles = new Map();
    bundleGraph.traverseContents((node, ctx, actions) => {
      if (node.type !== 'asset') {
        return;
      }

      let asset = node.value;

      if (asset.env.isIsolated()) {
        // If an asset's environment is isolated, it can't load shared bundles.
        // Don't add this asset to a shared bundle.
        return;
      }

      let containingBundles = bundleGraph.findBundlesWithAsset(asset) // Don't create shared bundles from entry bundles, as that would require
      // another entry bundle depending on these conditions, making it difficult
      // to predict and reference.
      .filter(b => !b.isEntry);

      if (containingBundles.length > OPTIONS.minBundles) {
        let id = containingBundles.map(b => b.id).sort().join(':');
        let candidate = candidateBundles.get(id);

        if (candidate) {
          candidate.assets.push(asset);

          for (let bundle of containingBundles) {
            candidate.sourceBundles.add(bundle);
          }

          candidate.size += bundleGraph.getTotalSize(asset);
        } else {
          candidateBundles.set(id, {
            assets: [asset],
            sourceBundles: new Set(containingBundles),
            size: bundleGraph.getTotalSize(asset)
          });
        } // Skip children from consideration since we added a parent already.


        actions.skipChildren();
      }
    }); // Sort candidates by size (consider larger bundles first), and ensure they meet the size threshold

    let sortedCandidates = Array.from(candidateBundles.values()).filter(bundle => bundle.size >= OPTIONS.minBundleSize).sort((a, b) => b.size - a.size);

    for (let _ref of sortedCandidates) {
      let {
        assets,
        sourceBundles
      } = _ref;
      // Find all bundle groups connected to the original bundles
      let bundleGroups = new Set();

      for (let bundle of sourceBundles) {
        for (let bundleGroup of bundleGraph.getBundleGroupsContainingBundle(bundle)) {
          bundleGroups.add(bundleGroup);
        }
      } // Check that all the bundle groups are inside the parallel request limit.


      if (Array.from(bundleGroups).some(group => bundleGraph.getBundlesInBundleGroup(group).length >= OPTIONS.maxParallelRequests)) {
        continue;
      }

      let [firstBundle] = [...sourceBundles];
      let sharedBundle = bundleGraph.createBundle({
        id: (0, _utils.md5FromString)([...sourceBundles].map(b => b.id).join(':')),
        env: firstBundle.env,
        target: firstBundle.target,
        type: firstBundle.type
      }); // Remove all of the root assets from each of the original bundles

      for (let asset of assets) {
        bundleGraph.addAssetGraphToBundle(asset, sharedBundle);

        for (let bundle of sourceBundles) {
          bundleGraph.removeAssetGraphFromBundle(asset, bundle);
        }
      } // Create new bundle node and connect it to all of the original bundle groups


      for (let bundleGroup of bundleGroups) {
        bundleGraph.addBundleToBundleGroup(sharedBundle, bundleGroup);
      }

      deduplicateBundle(bundleGraph, sharedBundle);
    }
  }

});

exports.default = _default;

function deduplicateBundle(bundleGraph, bundle) {
  if (bundle.env.isIsolated()) {
    // If a bundle's environment is isolated, it can't access assets present
    // in any ancestor bundles. Don't deduplicate any assets.
    return;
  }

  bundle.traverse(node => {
    if (node.type !== 'dependency') {
      return;
    }

    let dependency = node.value;
    let assets = bundleGraph.getDependencyAssets(dependency);

    for (let asset of assets) {
      if (bundle.hasAsset(asset) && bundleGraph.isAssetInAncestorBundles(bundle, asset)) {
        bundleGraph.removeAssetGraphFromBundle(asset, bundle);
      }
    }
  });
}