"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _assert = _interopRequireDefault(require("assert"));

var _Server = _interopRequireDefault(require("./Server"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let servers = new Map();

var _default = new _plugin.Reporter({
  async report(event, options) {
    let serve = options.serve;
    if (!serve) return;
    let server = servers.get(serve.port);

    switch (event.type) {
      case 'watchStart':
        {
          var _serve$publicUrl;

          // If there's already a server when watching has just started, something
          // is wrong.
          (0, _assert.default)(server == null);

          let serverOptions = _objectSpread({}, serve, {
            projectRoot: options.projectRoot,
            cacheDir: options.cacheDir,
            distDir: _path.default.join(options.cacheDir, 'dist'),
            // Override the target's publicUrl as that is likely meant for production.
            // This could be configurable in the future.
            publicUrl: (_serve$publicUrl = serve.publicUrl) !== null && _serve$publicUrl !== void 0 ? _serve$publicUrl : '/',
            inputFS: options.inputFS,
            outputFS: options.outputFS
          });

          server = new _Server.default(serverOptions);
          servers.set(serverOptions.port, server);
          await server.start();
          break;
        }

      case 'watchEnd':
        (0, _assert.default)(server != null);
        await server.stop();
        servers.delete(serve.port);
        break;

      case 'buildSuccess':
        (0, _assert.default)(server != null);
        server.buildSuccess(event.bundleGraph);
        break;

      case 'buildFailure':
        (0, _assert.default)(server != null);
        server.buildError(event.error);
        break;
    }
  }

});

exports.default = _default;