"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _path = _interopRequireDefault(require("path"));

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _CompilerHost = require("./CompilerHost");

var _TSModuleGraph = require("./TSModuleGraph");

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _collect = require("./collect");

var _shake = require("./shake");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = new _plugin.Transformer({
  async loadConfig({
    config
  }) {
    let configResult = await config.getConfig(['tsconfig.json']);
    config.setResult(configResult);
  },

  async transform({
    asset,
    config,
    options
  }) {
    let ts = await options.packageManager.require('typescript', asset.filePath);

    let opts = _objectSpread({}, config === null || config === void 0 ? void 0 : config.compilerOptions, {
      // Always emit output
      noEmit: false,
      noEmitOnError: false,
      declaration: true,
      declarationMap: true,
      isolatedModules: false,
      emitDeclarationOnly: true,
      outFile: 'index.d.ts',
      moduleResolution: ts.ModuleResolutionKind.NodeJs
    });

    let host = new _CompilerHost.ParcelCompilerHost(options.inputFS, ts); // $FlowFixMe

    let program = ts.createProgram([asset.filePath], opts, host);
    let includedFiles = program.getSourceFiles().filter(file => _path.default.normalize(file.fileName) !== asset.filePath).map(file => ({
      filePath: file.fileName
    }));

    let mainModuleName = _path.default.relative(program.getCommonSourceDirectory(), asset.filePath).slice(0, -_path.default.extname(asset.filePath).length);

    let moduleGraph = new _TSModuleGraph.TSModuleGraph(ts, mainModuleName);
    program.emit(undefined, undefined, undefined, true, {
      afterDeclarations: [// 1. Build module graph
      context => sourceFile => {
        return (0, _collect.collect)(ts, moduleGraph, context, sourceFile);
      }, // 2. Tree shake and rename types
      context => sourceFile => {
        return (0, _shake.shake)(ts, moduleGraph, context, sourceFile);
      }]
    });
    let code = (0, _nullthrows.default)(host.outputCode);
    code = code.substring(0, code.lastIndexOf('//# sourceMappingURL'));
    let map = JSON.parse((0, _nullthrows.default)(host.outputMap));
    map.sources = map.sources.map(source => _path.default.join(_path.default.dirname(asset.filePath), source));
    return [{
      type: 'ts',
      code,
      map: await _sourceMap.default.fromRawSourceMap(map),
      includedFiles
    }];
  }

});

exports.default = _default;