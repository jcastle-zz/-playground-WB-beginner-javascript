"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParcelCompilerHost = void 0;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ParcelCompilerHost {
  constructor(fs, ts) {
    _defineProperty(this, "fs", void 0);

    _defineProperty(this, "ts", void 0);

    _defineProperty(this, "outputCode", void 0);

    _defineProperty(this, "outputMap", void 0);

    this.fs = fs;
    this.ts = ts;
  }

  getSourceFile(filePath, languageVersion) {
    const sourceText = this.readFile(filePath);
    return sourceText !== undefined ? this.ts.createSourceFile(filePath, sourceText, languageVersion) : undefined;
  }

  getDefaultLibFileName() {
    return 'lib.d.ts';
  }

  writeFile(filePath, content) {
    if (_path.default.extname(filePath) === '.map') {
      this.outputMap = content;
    } else {
      this.outputCode = content;
    }
  }

  getCurrentDirectory() {
    return this.fs.cwd();
  }

  fileExists(filePath) {
    try {
      return this.fs.statSync(filePath).isFile();
    } catch (err) {
      return false;
    }
  }

  readFile(filePath) {
    try {
      return this.fs.readFileSync(filePath, 'utf8');
    } catch (err) {
      if (err.code === 'ENOENT') {
        return undefined;
      }

      throw err;
    }
  }

  directoryExists(filePath) {
    try {
      return this.fs.statSync(filePath).isDirectory();
    } catch (err) {
      return false;
    }
  }

  realpath(filePath) {
    try {
      return this.fs.realpathSync(filePath);
    } catch (err) {
      return filePath;
    }
  } // getDirectories(filePath: FilePath) {
  //   return this.fs.readdirSync(filePath);
  // }


  getCanonicalFileName(fileName) {
    return this.ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();
  }

  useCaseSensitiveFileNames() {
    return this.ts.sys.useCaseSensitiveFileNames;
  }

  getNewLine() {
    return this.ts.sys.newLine;
  }

}

exports.ParcelCompilerHost = ParcelCompilerHost;