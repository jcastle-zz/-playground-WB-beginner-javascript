"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _terser = require("terser");

var _plugin = require("@parcel/plugin");

var _utils = require("@parcel/utils");

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = new _plugin.Optimizer({
  async optimize({
    contents,
    map,
    bundle,
    options
  }) {
    if (!options.minify) {
      return {
        contents,
        map
      };
    }

    if (typeof contents !== 'string') {
      throw new Error('TerserOptimizer: Only string contents are currently supported');
    }

    let userConfig = await (0, _utils.loadConfig)(options.inputFS, (0, _nullthrows.default)(bundle.getMainEntry()).filePath, ['.terserrc', '.uglifyrc', '.uglifyrc.js', '.terserrc.js']);

    let config = _objectSpread({
      warnings: true
    }, userConfig === null || userConfig === void 0 ? void 0 : userConfig.config, {
      sourceMap: {
        filename: _path.default.relative(options.projectRoot, bundle.filePath)
      },
      module: bundle.env.outputFormat === 'esmodule'
    });

    let sourceMap = null;

    if (options.sourceMaps) {
      sourceMap = new _sourceMap.default(); // $FlowFixMe

      config.output = {
        source_map: {
          add(source, gen_line, gen_col, orig_line, orig_col, name) {
            // $FlowFixMe
            sourceMap.addMapping({
              source,
              name,
              original: {
                line: orig_line,
                column: orig_col
              },
              generated: {
                line: gen_line,
                column: gen_col
              }
            });
          }

        }
      };
    }

    if (sourceMap && map) {
      sourceMap = await map.extend(sourceMap);
    }

    let result = (0, _terser.minify)(contents, config);

    if (result.error) {
      throw result.error;
    }

    return {
      contents: (0, _nullthrows.default)(result.code),
      map: sourceMap
    };
  }

});

exports.default = _default;