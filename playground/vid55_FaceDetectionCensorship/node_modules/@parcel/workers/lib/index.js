"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Handle", {
  enumerable: true,
  get: function () {
    return _WorkerFarm.Handle;
  }
});
Object.defineProperty(exports, "bus", {
  enumerable: true,
  get: function () {
    return _bus.default;
  }
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _WorkerFarm = _interopRequireWildcard(require("./WorkerFarm"));

var _logger = _interopRequireDefault(require("@parcel/logger"));

var _bus = _interopRequireDefault(require("./bus"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!_WorkerFarm.default.isWorker()) {
  // Forward all logger events originating from workers into the main process
  _bus.default.on('logEvent', e => {
    switch (e.level) {
      case 'info':
        (0, _assert.default)(typeof e.message === 'string');

        _logger.default.info(e.message);

        break;

      case 'progress':
        (0, _assert.default)(typeof e.message === 'string');

        _logger.default.progress(e.message);

        break;

      case 'verbose':
        (0, _assert.default)(typeof e.message === 'string');

        _logger.default.verbose(e.message);

        break;

      case 'warn':
        _logger.default.warn(e.message);

        break;

      case 'error':
        _logger.default.error(e.message);

        break;

      default:
        throw new Error('Unknown log level');
    }
  });
}

var _default = _WorkerFarm.default;
exports.default = _default;