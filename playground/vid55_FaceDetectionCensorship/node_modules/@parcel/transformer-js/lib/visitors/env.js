"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var types = _interopRequireWildcard(require("@babel/types"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  MemberExpression(node, {
    asset,
    env
  }) {
    // Inline environment variables accessed on process.env
    if (types.matchesPattern(node.object, 'process.env')) {
      let key = types.toComputedKey(node);

      if (types.isStringLiteral(key)) {
        var _env$key$value;

        // Try using the value from the passed env (either from new Parcel
        // options or from dotenv), and fall back to process.env
        let prop = (_env$key$value = env[key.value]) !== null && _env$key$value !== void 0 ? _env$key$value : process.env[key.value];

        if (typeof prop !== 'function') {
          let value = types.valueToNode(prop);
          morph(node, value);
          asset.ast.isDirty = true; // asset.meta.env[key.value] = process.env[key.value];
        }
      }
    }
  }

}; // replace object properties

exports.default = _default;

function morph(object, newProperties) {
  for (let key in object) {
    delete object[key];
  }

  for (let key in newProperties) {
    object[key] = newProperties[key];
  }
}