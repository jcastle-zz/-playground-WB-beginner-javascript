"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _path = _interopRequireDefault(require("path"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _AssetGraph = _interopRequireDefault(require("./AssetGraph"));

var _BundleGraph = _interopRequireDefault(require("./public/BundleGraph"));

var _BundleGraph2 = _interopRequireWildcard(require("./BundleGraph"));

var _MutableBundleGraph = _interopRequireDefault(require("./public/MutableBundleGraph"));

var _Bundle = require("./public/Bundle");

var _ReporterRunner = require("./ReporterRunner");

var _dumpGraphToGraphViz = _interopRequireDefault(require("./dumpGraphToGraphViz"));

var _utils = require("@parcel/utils");

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

var _applyRuntimes = _interopRequireDefault(require("./applyRuntimes"));

var _constants = require("./constants");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BundlerRunner {
  constructor(opts) {
    _defineProperty(this, "options", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    _defineProperty(this, "farm", void 0);

    _defineProperty(this, "runtimesBuilder", void 0);

    _defineProperty(this, "isBundling", false);

    this.options = opts.options;
    this.config = opts.config;
    this.pluginOptions = new _PluginOptions.default(this.options);
    this.runtimesBuilder = opts.runtimesBuilder;
    this.farm = opts.workerFarm;
  }

  async bundle(graph) {
    (0, _ReporterRunner.report)({
      type: 'buildProgress',
      phase: 'bundling'
    });
    let cacheKey;

    if (!this.options.disableCache) {
      cacheKey = await this.getCacheKey(graph);
      let cachedBundleGraph = await this.options.cache.get(cacheKey);

      if (cachedBundleGraph) {
        return cachedBundleGraph;
      }
    }

    let bundler = await this.config.getBundler();
    let bundleGraph = (0, _BundleGraph2.removeAssetGroups)(graph); // $FlowFixMe

    let internalBundleGraph = new _BundleGraph2.default({
      graph: bundleGraph
    });
    await (0, _dumpGraphToGraphViz.default)(bundleGraph, 'before_bundle');
    let mutableBundleGraph = new _MutableBundleGraph.default(internalBundleGraph, this.options);
    await bundler.bundle({
      bundleGraph: mutableBundleGraph,
      options: this.pluginOptions
    });
    await (0, _dumpGraphToGraphViz.default)(bundleGraph, 'after_bundle');
    await bundler.optimize({
      bundleGraph: mutableBundleGraph,
      options: this.pluginOptions
    });
    await (0, _dumpGraphToGraphViz.default)(bundleGraph, 'after_optimize');
    await this.nameBundles(internalBundleGraph);
    await (0, _applyRuntimes.default)({
      bundleGraph: internalBundleGraph,
      runtimesBuilder: this.runtimesBuilder,
      config: this.config,
      options: this.options,
      pluginOptions: this.pluginOptions
    });
    await (0, _dumpGraphToGraphViz.default)(bundleGraph, 'after_runtimes');

    if (cacheKey != null) {
      await this.options.cache.set(cacheKey, internalBundleGraph);
    }

    return internalBundleGraph;
  }

  async getCacheKey(assetGraph) {
    let bundler = this.config.bundler;
    let {
      pkg
    } = await this.options.packageManager.resolve(`${bundler}/package.json`, `${this.config.filePath}/index` // TODO: is this right?
    );
    let version = (0, _nullthrows.default)(pkg).version;
    return (0, _utils.md5FromObject)({
      parcelVersion: _constants.PARCEL_VERSION,
      bundler,
      version,
      hash: assetGraph.getHash()
    });
  }

  async nameBundles(bundleGraph) {
    let namers = await this.config.getNamers();
    let bundles = bundleGraph.getBundles();
    await Promise.all(bundles.map(bundle => this.nameBundle(namers, bundle, bundleGraph)));
    let bundlePaths = bundles.map(b => b.filePath);

    _assert.default.deepEqual(bundlePaths, (0, _utils.unique)(bundlePaths), 'Bundles must have unique filePaths');
  }

  async nameBundle(namers, internalBundle, internalBundleGraph) {
    let bundle = new _Bundle.Bundle(internalBundle, internalBundleGraph, this.options);
    let bundleGraph = new _BundleGraph.default(internalBundleGraph, this.options);

    for (let namer of namers) {
      let name = await namer.name({
        bundle,
        bundleGraph,
        options: this.pluginOptions
      });

      if (name != null) {
        if (_path.default.extname(name).slice(1) !== bundle.type) {
          throw new Error(`Destination name ${name} extension does not match bundle type "${bundle.type}"`);
        }

        let target = (0, _nullthrows.default)(internalBundle.target);
        internalBundle.filePath = _path.default.join(target.distDir, (0, _utils.normalizeSeparators)(name));
        internalBundle.name = name;
        return;
      }
    }

    throw new Error('Unable to name bundle');
  }

}

exports.default = BundlerRunner;