"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _ReporterRunner = require("./ReporterRunner");

var _Dependency = _interopRequireDefault(require("./public/Dependency"));

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ResolverRunner {
  constructor({
    config,
    options
  }) {
    _defineProperty(this, "config", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    this.config = config;
    this.options = options;
    this.pluginOptions = new _PluginOptions.default(this.options);
  }

  async resolve(dependency) {
    let dep = new _Dependency.default(dependency);
    (0, _ReporterRunner.report)({
      type: 'buildProgress',
      phase: 'resolving',
      dependency: dep
    });
    let resolvers = await this.config.getResolvers();

    for (let resolver of resolvers) {
      let result = await resolver.resolve({
        dependency: dep,
        options: this.pluginOptions
      });

      if (result && result.isExcluded) {
        return null;
      }

      if (result && result.filePath) {
        return {
          filePath: result.filePath,
          sideEffects: result.sideEffects,
          code: result.code,
          env: dependency.env,
          pipeline: dependency.pipeline
        };
      }
    }

    if (dep.isOptional) {
      return null;
    }

    let dir = dependency.sourcePath ? _path.default.dirname(dependency.sourcePath) : '<none>';
    let err = new Error(`Cannot find module '${dependency.moduleSpecifier}' from '${dir}'`);
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  }

}

exports.default = ResolverRunner;