"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConfig = createConfig;
exports.addDevDependency = addDevDependency;
exports.getInvalidations = getInvalidations;

function createConfig({
  isSource,
  searchPath,
  env,
  resolvedPath,
  result,
  includedFiles,
  watchGlob,
  devDeps,
  shouldRehydrate,
  shouldReload,
  shouldInvalidateOnStartup
}) {
  var _result, _includedFiles, _devDeps, _shouldRehydrate, _shouldReload, _shouldInvalidateOnSt;

  return {
    isSource,
    searchPath,
    env,
    resolvedPath,
    result: (_result = result) !== null && _result !== void 0 ? _result : null,
    resultHash: null,
    includedFiles: (_includedFiles = includedFiles) !== null && _includedFiles !== void 0 ? _includedFiles : new Set(),
    pkg: null,
    watchGlob,
    devDeps: (_devDeps = devDeps) !== null && _devDeps !== void 0 ? _devDeps : new Map(),
    shouldRehydrate: (_shouldRehydrate = shouldRehydrate) !== null && _shouldRehydrate !== void 0 ? _shouldRehydrate : false,
    shouldReload: (_shouldReload = shouldReload) !== null && _shouldReload !== void 0 ? _shouldReload : false,
    shouldInvalidateOnStartup: (_shouldInvalidateOnSt = shouldInvalidateOnStartup) !== null && _shouldInvalidateOnSt !== void 0 ? _shouldInvalidateOnSt : false
  };
}

function addDevDependency(config, name, version) {
  config.devDeps.set(name, version);
} // TODO: start using edge types for more flexible invalidations


function getInvalidations(config) {
  let invalidations = [];

  if (config.watchGlob != null) {
    invalidations.push({
      action: 'add',
      pattern: config.watchGlob
    });
  }

  for (let filePath of [config.resolvedPath, ...config.includedFiles]) {
    invalidations.push({
      action: 'change',
      pattern: filePath
    });
    invalidations.push({
      action: 'unlink',
      pattern: filePath
    });
  }

  return invalidations;
}