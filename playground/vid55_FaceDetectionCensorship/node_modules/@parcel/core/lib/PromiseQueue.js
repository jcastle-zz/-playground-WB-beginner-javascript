"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PromiseQueue {
  constructor(opts = {}) {
    _defineProperty(this, "_queue", void 0);

    _defineProperty(this, "_running", void 0);

    _defineProperty(this, "_numRunning", void 0);

    _defineProperty(this, "_maxConcurrent", void 0);

    _defineProperty(this, "_resolve", void 0);

    _defineProperty(this, "_reject", void 0);

    this._resetState();

    this._maxConcurrent = opts.maxConcurrent || Infinity;
  }

  _resetState() {
    this._queue = [];
    this._running = false;
    this._numRunning = 0;
  }

  add(fn) {
    this._queue.push(fn);
  }

  run() {
    if (this._queue.length === 0) {
      return Promise.resolve();
    } // ? What should we do if queue is already running?
    // Should we throw an error since we are using the same queue for different phases and trying to
    //  run while it's already running is probably in error
    // Or just be fault tolerant and return the already running promise?


    this._running = true;
    return new Promise((resolve, reject) => {
      this._reject = e => {
        this._resetState();

        reject(e);
      };

      this._resolve = () => {
        this._resetState();

        resolve();
      };

      while (this._queue.length && this._numRunning < this._maxConcurrent) {
        this._next();
      }
    });
  }

  async _next() {
    let fn = this._queue.shift();

    await this._runFn(fn);

    if (this._queue.length) {
      this._next();
    } else if (this._numRunning === 0) {
      this._resolve();
    }
  }

  async _runFn(fn) {
    try {
      this._numRunning++;
      await fn();
      this._numRunning--;
    } catch (e) {
      this._reject(e);
    }
  }

}

exports.default = PromiseQueue;

_defineProperty(PromiseQueue, "__exportSpecifier", "@parcel/core/lib/PromiseQueue.js");