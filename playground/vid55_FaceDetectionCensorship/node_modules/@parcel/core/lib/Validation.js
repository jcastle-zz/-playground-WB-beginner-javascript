"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _utils = require("@parcel/utils");

var _ReporterRunner = require("./ReporterRunner");

var _InternalAsset = _interopRequireWildcard(require("./InternalAsset"));

var _Asset = require("./public/Asset");

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

var _summarizeRequest = _interopRequireDefault(require("./summarizeRequest"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Validation {
  constructor({
    request,
    loadConfig,
    parentNodeId,
    options,
    workerApi
  }) {
    _defineProperty(this, "request", void 0);

    _defineProperty(this, "configRequests", void 0);

    _defineProperty(this, "loadConfig", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "impactfulOptions", void 0);

    _defineProperty(this, "workerApi", void 0);

    this.request = request;
    this.configRequests = [];

    this.loadConfig = configRequest => {
      this.configRequests.push(configRequest);
      return loadConfig(configRequest, parentNodeId);
    };

    this.options = options;
    this.workerApi = workerApi;
  }

  async run() {
    (0, _ReporterRunner.report)({
      type: 'validation',
      filePath: this.request.filePath
    });
    let asset = await this.loadAsset();
    let configRequest = {
      filePath: this.request.filePath,
      isSource: asset.value.isSource,
      meta: {
        actionType: 'validation'
      },
      env: this.request.env
    };
    let config = await this.loadConfig(configRequest);
    let parcelConfig = (0, _nullthrows.default)(config.result);
    let validators = await parcelConfig.getValidators(this.request.filePath);
    let pluginOptions = new _PluginOptions.default(this.options);

    for (let validator of validators) {
      let config = null;

      if (validator.getConfig) {
        config = await validator.getConfig({
          asset: new _Asset.Asset(asset),
          options: pluginOptions,
          resolveConfig: configNames => (0, _utils.resolveConfig)(this.options.inputFS, asset.value.filePath, configNames)
        });
      }

      await validator.validate({
        asset: new _Asset.Asset(asset),
        options: pluginOptions,
        config
      });
    }
  }

  async loadAsset() {
    let {
      filePath,
      env,
      code,
      sideEffects
    } = this.request;
    let {
      content,
      size,
      hash,
      isSource
    } = await (0, _summarizeRequest.default)(this.options.inputFS, this.request); // If the transformer request passed code rather than a filename,
    // use a hash as the base for the id to ensure it is unique.

    let idBase = code != null ? hash : filePath;
    return new _InternalAsset.default({
      idBase,
      value: (0, _InternalAsset.createAsset)({
        idBase,
        filePath: filePath,
        isSource,
        type: _path.default.extname(filePath).slice(1),
        hash,
        env: env,
        stats: {
          time: 0,
          size
        },
        sideEffects: sideEffects
      }),
      options: this.options,
      content
    });
  }

}

exports.default = Validation;