"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _config = require("@parcel/utils/src/config");

var _Config = _interopRequireDefault(require("./Config"));

var fs = _interopRequireWildcard(require("@parcel/fs"));

var _json = require("json5");

var _path = _interopRequireDefault(require("path"));

var _localRequire = require("@parcel/utils/src/localRequire");

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ConfigResolver {
  async resolve(rootDir) {
    let configPath = await (0, _config.resolveConfig)(_path.default.join(rootDir, 'index'), ['.parcelrc']);

    if (!configPath) {
      return null;
    }

    let config = await this.loadConfig(configPath);
    return new _Config.default(_objectSpread({}, config, {
      filePath: configPath
    }));
  }

  async create(config) {
    // Resolve plugins from the root when a config is passed programmatically
    let result = await this.processConfig(config);
    return new _Config.default(result);
  }

  async loadConfig(configPath) {
    let config = (0, _json.parse)((await fs.readFile(configPath)));
    return this.processConfig(_objectSpread({}, config, {
      filePath: configPath
    }));
  }

  async processConfig(config) {
    let relativePath = _path.default.relative(process.cwd(), config.filePath);

    this.validateConfig(config, relativePath);

    if (config.extends) {
      let exts = Array.isArray(config.extends) ? config.extends : [config.extends];

      for (let ext of exts) {
        let resolved = await this.resolveExtends(ext, config.filePath);
        let baseConfig = await this.loadConfig(resolved);
        config = this.mergeConfigs(baseConfig, config);
      }
    }

    return config;
  }

  async resolveExtends(ext, configPath) {
    if (ext.startsWith('.')) {
      return _path.default.resolve(_path.default.dirname(configPath), ext);
    } else {
      let [resolved] = await (0, _localRequire.localResolve)(ext, configPath);
      return fs.realpath(resolved);
    }
  }

  validateConfig(config, relativePath) {
    this.validateExtends(config.extends, relativePath);
    this.validatePipeline(config.resolvers, 'resolver', 'resolvers', relativePath);
    this.validateMap(config.transforms, this.validatePipeline.bind(this), 'transformer', 'transforms', relativePath);
    this.validatePackageName(config.bundler, 'bundler', 'bundler', relativePath);
    this.validatePipeline(config.namers, 'namer', 'namers', relativePath);
    this.validateMap(config.runtimes, this.validatePipeline.bind(this), 'runtime', 'runtimes', relativePath);
    this.validateMap(config.packagers, this.validatePackageName.bind(this), 'packager', 'packagers', relativePath);
    this.validateMap(config.optimizers, this.validatePipeline.bind(this), 'optimizer', 'optimizers', relativePath);
    this.validatePipeline(config.reporters, 'reporter', 'reporters', relativePath);
  }

  validateExtends(exts, relativePath) {
    if (Array.isArray(exts)) {
      for (let ext of exts) {
        (0, _assert.default)(typeof ext === 'string', `"extends" elements must be strings in ${relativePath}`);
        this.validateExtendsConfig(ext, relativePath);
      }
    } else if (exts) {
      (0, _assert.default)(typeof exts === 'string', `"extends" must be a string or array of strings in ${relativePath}`);
      this.validateExtendsConfig(exts, relativePath);
    }
  }

  validateExtendsConfig(ext, relativePath) {
    if (!ext.startsWith('.')) {
      this.validatePackageName(ext, 'config', 'extends', relativePath);
    }
  }

  validatePipeline(pipeline, pluginType, key, relativePath) {
    if (!pipeline) {
      return;
    }

    (0, _assert.default)(Array.isArray(pipeline), `"${key}" must be an array in ${relativePath}`);
    (0, _assert.default)(pipeline.every(pkg => typeof pkg === 'string'), `"${key}" elements must be strings in ${relativePath}`);

    for (let pkg of pipeline) {
      if (pkg !== '...') {
        this.validatePackageName(pkg, pluginType, key, relativePath);
      }
    }
  }

  validateMap(globMap, validator, pluginType, configKey, relativePath) {
    if (!globMap) {
      return;
    }

    (0, _assert.default)(typeof globMap === 'object', `"${configKey}" must be an object in ${relativePath}`);

    for (let k in globMap) {
      // Flow doesn't correctly infer the type. See https://github.com/facebook/flow/issues/1736.
      let key = k;
      validator(globMap[key], pluginType, `${configKey}["${k}"]`, relativePath);
    }
  }

  validatePackageName(pkg, pluginType, key, relativePath) {
    if (!pkg) {
      return;
    }

    (0, _assert.default)(typeof pkg === 'string', `"${key}" must be a string in ${relativePath}`);

    if (pkg.startsWith('@parcel')) {
      (0, _assert.default)(pkg.replace(/^@parcel\//, '').startsWith(`${pluginType}-`), `Official parcel ${pluginType} packages must be named according to "@parcel/${pluginType}-{name}" but got "${pkg}" in ${relativePath}.`);
    } else if (pkg.startsWith('@')) {
      let [scope, name] = pkg.split('/');
      (0, _assert.default)(name.startsWith(`parcel-${pluginType}-`), `Scoped parcel ${pluginType} packages must be named according to "${scope}/parcel-${pluginType}-{name}" but got "${pkg}" in ${relativePath}.`);
    } else {
      (0, _assert.default)(pkg.startsWith(`parcel-${pluginType}-`), `Parcel ${pluginType} packages must be named according to "parcel-${pluginType}-{name}" but got "${pkg}" in ${relativePath}.`);
    }
  }

  mergeConfigs(base, ext) {
    return {
      filePath: base.filePath,
      // TODO: revisit this - it should resolve plugins based on the actual config they are defined in
      resolvers: this.mergePipelines(base.resolvers, ext.resolvers),
      transforms: this.mergeMaps(base.transforms, ext.transforms, this.mergePipelines),
      bundler: ext.bundler || base.bundler,
      namers: this.mergePipelines(base.namers, ext.namers),
      runtimes: this.mergeMaps(base.runtimes, ext.runtimes),
      packagers: this.mergeMaps(base.packagers, ext.packagers),
      optimizers: this.mergeMaps(base.optimizers, ext.optimizers, this.mergePipelines),
      reporters: this.mergePipelines(base.reporters, ext.reporters)
    };
  }

  mergePipelines(base, ext) {
    if (!ext) {
      return base || [];
    }

    if (base) {
      // Merge the base pipeline if a rest element is defined
      let spreadIndex = ext.indexOf('...');

      if (spreadIndex >= 0) {
        if (ext.filter(v => v === '...').length > 1) {
          throw new Error('Only one spread element can be included in a config pipeline');
        }

        ext = [...ext.slice(0, spreadIndex), ...(base || []), ...ext.slice(spreadIndex + 1)];
      }
    }

    return ext;
  }

  mergeMaps(base, ext, merger) {
    if (!ext) {
      return base || {};
    }

    if (!base) {
      return ext;
    } // Add the extension options first so they have higher precedence in the output glob map


    let res = {};

    for (let k in ext) {
      // Flow doesn't correctly infer the type. See https://github.com/facebook/flow/issues/1736.
      let key = k;
      res[key] = merger && base[key] ? merger(base[key], ext[key]) : ext[key];
    } // Add base options that aren't defined in the extension


    for (let k in base) {
      let key = k;

      if (!res[key]) {
        res[key] = base[key];
      }
    }

    return res;
  }

}

exports.default = ConfigResolver;

_defineProperty(ConfigResolver, "__exportSpecifier", "@parcel/core/lib/ConfigResolver.js");