"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.report = report;
exports.default = void 0;

var _Bundle = require("./public/Bundle");

var _workers = require("@parcel/workers");

var _ParcelConfig = _interopRequireDefault(require("./ParcelConfig"));

var _logger = _interopRequireWildcard(require("@parcel/logger"));

var _PluginOptions = _interopRequireDefault(require("./public/PluginOptions"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ReporterRunner {
  constructor(opts) {
    _defineProperty(this, "config", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    this.config = opts.config;
    this.options = opts.options;
    this.pluginOptions = new _PluginOptions.default(this.options);

    _logger.default.onLog(event => this.report(event)); // Convert any internal bundles back to their public equivalents as reporting
    // is public api


    _workers.bus.on('reporterEvent', event => {
      if (event.bundle == null) {
        this.report(event);
      } else {
        this.report(_objectSpread({}, event, {
          bundle: new _Bundle.NamedBundle(event.bundle, event.bundleGraph, this.options)
        }));
      }
    });

    if (this.options.patchConsole) {
      (0, _logger.patchConsole)();
    }
  }

  async report(event) {
    let reporters = await this.config.getReporters();

    for (let reporter of reporters) {
      await reporter.report(event, this.pluginOptions);
    }
  }

}

exports.default = ReporterRunner;

function report(event) {
  if (event.bundle == null) {
    _workers.bus.emit('reporterEvent', event);
  } else {
    // Convert any public api bundles to their internal equivalents for
    // easy serialization
    _workers.bus.emit('reporterEvent', _objectSpread({}, event, {
      bundle: (0, _Bundle.bundleToInternalBundle)(event.bundle)
    }));
  }
}