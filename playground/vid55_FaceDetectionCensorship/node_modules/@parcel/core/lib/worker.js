"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runTransform = runTransform;
exports.runValidate = runValidate;
exports.runPackage = runPackage;

var _assert = _interopRequireDefault(require("assert"));

var _BundleGraph = _interopRequireDefault(require("./BundleGraph"));

var _Transformation = _interopRequireDefault(require("./Transformation"));

var _PackagerRunner = _interopRequireDefault(require("./PackagerRunner"));

var _Validation = _interopRequireDefault(require("./Validation"));

var _ParcelConfig = _interopRequireDefault(require("./ParcelConfig"));

var _registerCoreWithSerializer = _interopRequireDefault(require("./registerCoreWithSerializer"));

require("@parcel/cache");

require("@parcel/package-manager");

require("@parcel/fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _registerCoreWithSerializer.default)(); // Remove the workerApi type from the TransformationOpts and ValidationOpts types:
// https://github.com/facebook/flow/issues/2835

function runTransform(workerApi, opts) {
  return new _Transformation.default(_objectSpread({
    workerApi
  }, opts)).run();
}

function runValidate(workerApi, opts) {
  return new _Validation.default(_objectSpread({
    workerApi
  }, opts)).run();
}

function runPackage(workerApi, {
  bundle,
  bundleGraphReference,
  config,
  cacheKey,
  options
}) {
  let bundleGraph = workerApi.getSharedReference(bundleGraphReference);
  (0, _assert.default)(bundleGraph instanceof _BundleGraph.default);
  return new _PackagerRunner.default({
    config,
    options
  }).packageAndWriteBundle(bundle, bundleGraph, cacheKey);
}