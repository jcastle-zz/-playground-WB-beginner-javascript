"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.nodeFromAssetGroup = void 0;

var _utils = require("@parcel/utils");

var _assert = _interopRequireDefault(require("assert"));

var _crypto = _interopRequireDefault(require("crypto"));

var _Graph = _interopRequireDefault(require("./Graph"));

var _Dependency = require("./Dependency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const invertMap = map => new Map([...map].map(([key, val]) => [val, key]));

const nodeFromDep = dep => ({
  id: dep.id,
  type: 'dependency',
  value: dep
});

const nodeFromAssetGroup = assetGroup => ({
  id: (0, _utils.md5FromObject)(assetGroup),
  type: 'asset_group',
  value: assetGroup
});

exports.nodeFromAssetGroup = nodeFromAssetGroup;

const nodeFromAsset = asset => ({
  id: asset.id,
  type: 'asset',
  value: asset
});

const nodeFromEntrySpecifier = entry => ({
  id: 'entry_specifier:' + entry,
  type: 'entry_specifier',
  value: entry
});

const nodeFromEntryFile = entry => ({
  id: 'entry_file:' + entry,
  type: 'entry_file',
  value: entry
});

class AssetGraph extends _Graph.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "onNodeAdded", void 0);

    _defineProperty(this, "onNodeRemoved", void 0);

    _defineProperty(this, "hash", void 0);
  }

  // $FlowFixMe
  static deserialize(opts) {
    let res = new AssetGraph(opts);
    res.hash = opts.hash;
    return res;
  } // $FlowFixMe


  serialize() {
    return _objectSpread({}, super.serialize(), {
      hash: this.hash
    });
  }

  initOptions({
    onNodeAdded,
    onNodeRemoved
  } = {}) {
    this.onNodeAdded = onNodeAdded;
    this.onNodeRemoved = onNodeRemoved;
  }

  initialize({
    entries,
    assetGroups
  }) {
    let rootNode = {
      id: '@@root',
      type: 'root',
      value: null
    };
    this.setRootNode(rootNode);
    let nodes = [];

    if (entries) {
      for (let entry of entries) {
        let node = nodeFromEntrySpecifier(entry);
        nodes.push(node);
      }
    } else if (assetGroups) {
      nodes.push(...assetGroups.map(assetGroup => nodeFromAssetGroup(assetGroup)));
    }

    this.replaceNodesConnectedTo(rootNode, nodes);
  }

  addNode(node) {
    this.hash = null;
    this.onNodeAdded && this.onNodeAdded(node);
    return super.addNode(node);
  }

  removeNode(node) {
    this.hash = null;
    this.onNodeRemoved && this.onNodeRemoved(node);
    return super.removeNode(node);
  }

  resolveEntry(entry, resolved) {
    let entryFileNodes = resolved.map(file => nodeFromEntryFile(file));
    this.replaceNodesConnectedTo(nodeFromEntrySpecifier(entry), entryFileNodes);
  }

  resolveTargets(entryFile, targets) {
    let depNodes = targets.map(target => nodeFromDep((0, _Dependency.createDependency)({
      moduleSpecifier: entryFile,
      pipeline: target.name,
      target: target,
      env: target.env,
      isEntry: true
    })));
    let entryNode = nodeFromEntryFile(entryFile);

    if (this.hasNode(entryNode.id)) {
      this.replaceNodesConnectedTo(entryNode, depNodes);
    }
  }

  resolveDependency(dependency, assetGroup) {
    let depNode = this.nodes.get(dependency.id);
    if (!assetGroup || !depNode) return;
    let assetGroupNode = nodeFromAssetGroup(assetGroup); // Defer transforming this dependency if it is marked as weak, there are no side effects,
    // no re-exported symbols are used by ancestor dependencies and the re-exporting asset isn't
    // using a wildcard.
    // This helps with performance building large libraries like `lodash-es`, which re-exports
    // a huge number of functions since we can avoid even transforming the files that aren't used.

    let defer = false;

    if (dependency.isWeak && assetGroup.sideEffects === false && !dependency.symbols.has('*')) {
      let assets = this.getNodesConnectedTo(depNode);
      let symbols = invertMap(dependency.symbols);
      let firstAsset = assets[0];
      (0, _assert.default)(firstAsset.type === 'asset');
      let resolvedAsset = firstAsset.value;
      let deps = this.getIncomingDependencies(resolvedAsset);
      defer = deps.every(d => !d.symbols.has('*') && ![...d.symbols.keys()].some(symbol => {
        let assetSymbol = resolvedAsset.symbols.get(symbol);
        return assetSymbol != null && symbols.has(assetSymbol);
      }));
    }

    if (!defer) {
      this.replaceNodesConnectedTo(depNode, [assetGroupNode]);
    }
  }

  resolveAssetGroup(assetGroup, assets) {
    let assetGroupNode = nodeFromAssetGroup(assetGroup);

    if (!this.hasNode(assetGroupNode.id)) {
      return;
    }

    let assetNodes = assets.map(asset => nodeFromAsset(asset));
    this.replaceNodesConnectedTo(assetGroupNode, assetNodes);

    for (let asset of assets) {
      let assetNode = nodeFromAsset(asset);
      assetNodes.push(assetNode);
    }

    this.replaceNodesConnectedTo(assetGroupNode, assetNodes);

    for (let assetNode of assetNodes) {
      let depNodes = [];
      (0, _assert.default)(assetNode.type === 'asset');

      for (let dep of assetNode.value.dependencies.values()) {
        let depNode = nodeFromDep(dep);
        depNodes.push(this.nodes.get(depNode.id) || depNode);
      }

      this.replaceNodesConnectedTo(assetNode, depNodes);
    }
  }

  getIncomingDependencies(asset) {
    let node = this.getNode(asset.id);

    if (!node) {
      return [];
    }

    return this.findAncestors(node, node => node.type === 'dependency').map(node => {
      (0, _assert.default)(node.type === 'dependency');
      return node.value;
    });
  }

  traverseAssets(visit, startNode) {
    return this.filteredTraverse(node => node.type === 'asset' ? node.value : null, visit, startNode);
  }

  getEntryAssetGroupNodes() {
    let entryNodes = [];
    this.traverse((node, _, actions) => {
      if (node.type === 'asset_group') {
        entryNodes.push(node);
        actions.skipChildren();
      }
    });
    return entryNodes;
  }

  getEntryAssets() {
    let entries = [];
    this.traverseAssets((asset, ctx, traversal) => {
      entries.push(asset);
      traversal.skipChildren();
    });
    return entries;
  }

  getHash() {
    if (this.hash != null) {
      return this.hash;
    }

    let hash = _crypto.default.createHash('md5'); // TODO: sort??


    this.traverse(node => {
      if (node.type === 'asset') {
        hash.update(node.value.outputHash);
      } else if (node.type === 'dependency' && node.value.target) {
        hash.update(JSON.stringify(node.value.target));
      }
    });
    this.hash = hash.digest('hex');
    return this.hash;
  }

}

exports.default = AssetGraph;