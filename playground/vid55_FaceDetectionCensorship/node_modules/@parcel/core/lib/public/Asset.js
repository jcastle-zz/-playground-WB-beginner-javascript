"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assetToInternalAsset = assetToInternalAsset;
exports.assetFromValue = assetFromValue;
exports.MutableAsset = exports.Asset = void 0;

var _url = _interopRequireDefault(require("url"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _utils = require("@parcel/utils");

var _Environment = _interopRequireDefault(require("./Environment"));

var _Dependency = _interopRequireDefault(require("./Dependency"));

var _InternalAsset = _interopRequireDefault(require("../InternalAsset"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

const _assetToInternalAsset = new WeakMap();

function assetToInternalAsset(asset) {
  return (0, _nullthrows.default)(_assetToInternalAsset.get(asset));
}

function assetFromValue(value, options) {
  return new Asset(new _InternalAsset.default({
    value,
    options
  }));
}

class BaseAsset {
  // InternalAsset
  constructor(asset) {
    _asset.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset, asset);

    _assetToInternalAsset.set(this, asset);
  }

  get id() {
    return _classPrivateFieldGet(this, _asset).value.id;
  }

  get ast() {
    return _classPrivateFieldGet(this, _asset).ast;
  }

  get type() {
    return _classPrivateFieldGet(this, _asset).value.type;
  }

  get env() {
    return new _Environment.default(_classPrivateFieldGet(this, _asset).value.env);
  }

  get fs() {
    return _classPrivateFieldGet(this, _asset).options.inputFS;
  }

  get filePath() {
    return _classPrivateFieldGet(this, _asset).value.filePath;
  }

  get meta() {
    return _classPrivateFieldGet(this, _asset).value.meta;
  }

  get isIsolated() {
    return _classPrivateFieldGet(this, _asset).value.isIsolated;
  }

  get isInline() {
    return _classPrivateFieldGet(this, _asset).value.isInline;
  }

  get isSource() {
    return _classPrivateFieldGet(this, _asset).value.isSource;
  }

  get sideEffects() {
    return _classPrivateFieldGet(this, _asset).value.sideEffects;
  }

  get symbols() {
    return _classPrivateFieldGet(this, _asset).value.symbols;
  }

  get uniqueKey() {
    return _classPrivateFieldGet(this, _asset).value.uniqueKey;
  }

  getConfig(filePaths, options) {
    return _classPrivateFieldGet(this, _asset).getConfig(filePaths, options);
  }

  getIncludedFiles() {
    return _classPrivateFieldGet(this, _asset).getIncludedFiles();
  }

  getDependencies() {
    return _classPrivateFieldGet(this, _asset).getDependencies().map(dep => new _Dependency.default(dep));
  }

  getPackage() {
    return _classPrivateFieldGet(this, _asset).getPackage();
  }

  getCode() {
    return _classPrivateFieldGet(this, _asset).getCode();
  }

  getBuffer() {
    return _classPrivateFieldGet(this, _asset).getBuffer();
  }

  getStream() {
    return _classPrivateFieldGet(this, _asset).getStream();
  }

  getMap() {
    return _classPrivateFieldGet(this, _asset).getMap();
  }

}

var _asset = new WeakMap();

class Asset extends BaseAsset {
  // InternalAsset
  constructor(asset) {
    super(asset);

    _asset2.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset2, asset);
  }

  get outputHash() {
    return _classPrivateFieldGet(this, _asset2).value.outputHash;
  }

  get stats() {
    return _classPrivateFieldGet(this, _asset2).value.stats;
  }

}

exports.Asset = Asset;

var _asset2 = new WeakMap();

class MutableAsset extends BaseAsset {
  // InternalAsset
  constructor(asset) {
    super(asset);

    _asset3.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _asset3, asset);
  }

  get ast() {
    return _classPrivateFieldGet(this, _asset3).ast;
  }

  set ast(ast) {
    _classPrivateFieldGet(this, _asset3).ast = ast;
  }

  setMap(map) {
    _classPrivateFieldGet(this, _asset3).map = map;
  }

  get type() {
    return _classPrivateFieldGet(this, _asset3).value.type;
  }

  set type(type) {
    _classPrivateFieldGet(this, _asset3).value.type = type;
  }

  get isIsolated() {
    return _classPrivateFieldGet(this, _asset3).value.isIsolated;
  }

  set isIsolated(isIsolated) {
    _classPrivateFieldGet(this, _asset3).value.isIsolated = isIsolated;
  }

  get isInline() {
    return _classPrivateFieldGet(this, _asset3).value.isInline;
  }

  set isInline(isInline) {
    _classPrivateFieldGet(this, _asset3).value.isInline = isInline;
  }

  addDependency(dep) {
    return _classPrivateFieldGet(this, _asset3).addDependency(dep);
  }

  addIncludedFile(file) {
    return _classPrivateFieldGet(this, _asset3).addIncludedFile(file);
  }

  setBuffer(buffer) {
    _classPrivateFieldGet(this, _asset3).setBuffer(buffer);
  }

  setCode(code) {
    _classPrivateFieldGet(this, _asset3).setCode(code);
  }

  setStream(stream) {
    _classPrivateFieldGet(this, _asset3).setStream(stream);
  }

  addURLDependency(url, opts) {
    if ((0, _utils.isURL)(url)) {
      return url;
    }

    let parsed = _url.default.parse(url);

    let pathname = parsed.pathname;

    if (pathname == null) {
      return url;
    }

    parsed.pathname = this.addDependency(_objectSpread({
      moduleSpecifier: decodeURIComponent(pathname),
      isURL: true,
      isAsync: true
    }, opts));
    return _url.default.format(parsed);
  }

}

exports.MutableAsset = MutableAsset;

var _asset3 = new WeakMap();