"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleGraphToInternalBundleGraph = bundleGraphToInternalBundleGraph;
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _Asset = require("./Asset");

var _Bundle = require("./Bundle");

var _Dependency = _interopRequireWildcard(require("./Dependency"));

var _Graph = require("../Graph");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

// Friendly access for other modules within this package that need access
// to the internal bundle.
const _bundleGraphToInternalBundleGraph = new WeakMap();

function bundleGraphToInternalBundleGraph(bundleGraph) {
  return (0, _nullthrows.default)(_bundleGraphToInternalBundleGraph.get(bundleGraph));
}

class BundleGraph {
  // InternalBundleGraph
  // ParcelOptions
  constructor(graph, options) {
    _graph.set(this, {
      writable: true,
      value: void 0
    });

    _options.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _graph, graph);

    _classPrivateFieldSet(this, _options, options);

    _bundleGraphToInternalBundleGraph.set(this, graph);
  }

  getDependencyResolution(dep) {
    let resolution = _classPrivateFieldGet(this, _graph).getDependencyResolution((0, _Dependency.dependencyToInternalDependency)(dep));

    if (resolution) {
      return (0, _Asset.assetFromValue)(resolution, _classPrivateFieldGet(this, _options));
    }
  }

  getIncomingDependencies(asset) {
    return _classPrivateFieldGet(this, _graph).getIncomingDependencies((0, _Asset.assetToInternalAsset)(asset).value).map(dep => new _Dependency.default(dep));
  }

  getBundleGroupsContainingBundle(bundle) {
    return _classPrivateFieldGet(this, _graph).getBundleGroupsContainingBundle((0, _Bundle.bundleToInternalBundle)(bundle));
  }

  getBundleGroupsReferencedByBundle(bundle) {
    return _classPrivateFieldGet(this, _graph).getBundleGroupsReferencedByBundle((0, _Bundle.bundleToInternalBundle)(bundle)).map(({
      bundleGroup,
      dependency
    }) => ({
      bundleGroup,
      dependency: new _Dependency.default(dependency)
    }));
  }

  getDependencies(asset) {
    return _classPrivateFieldGet(this, _graph).getDependencies((0, _Asset.assetToInternalAsset)(asset).value).map(dep => new _Dependency.default(dep));
  }

  isAssetInAncestorBundles(bundle, asset) {
    let internalNode = _classPrivateFieldGet(this, _graph)._graph.getNode(bundle.id);

    (0, _assert.default)(internalNode != null && internalNode.type === 'bundle');
    return _classPrivateFieldGet(this, _graph).isAssetInAncestorBundles(internalNode.value, (0, _Asset.assetToInternalAsset)(asset).value);
  }

  isAssetReferenced(asset) {
    return _classPrivateFieldGet(this, _graph).isAssetReferenced((0, _Asset.assetToInternalAsset)(asset).value);
  }

  isAssetReferencedByAssetType(asset, type) {
    return _classPrivateFieldGet(this, _graph).isAssetReferencedByAssetType((0, _Asset.assetToInternalAsset)(asset).value, type);
  }

  hasParentBundleOfType(bundle, type) {
    return _classPrivateFieldGet(this, _graph).hasParentBundleOfType((0, _Bundle.bundleToInternalBundle)(bundle), type);
  }

  getBundlesInBundleGroup(bundleGroup) {
    return _classPrivateFieldGet(this, _graph).getBundlesInBundleGroup(bundleGroup).map(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options)));
  }

  getBundles() {
    return _classPrivateFieldGet(this, _graph).getBundles().map(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options)));
  }

  resolveSymbol(asset, symbol) {
    let res = _classPrivateFieldGet(this, _graph).resolveSymbol((0, _Asset.assetToInternalAsset)(asset).value, symbol);

    return {
      asset: (0, _Asset.assetFromValue)(res.asset, _classPrivateFieldGet(this, _options)),
      exportSymbol: res.exportSymbol,
      symbol: res.symbol
    };
  }

  getExportedSymbols(asset) {
    let res = _classPrivateFieldGet(this, _graph).getExportedSymbols((0, _Asset.assetToInternalAsset)(asset).value);

    return res.map(e => ({
      asset: (0, _Asset.assetFromValue)(e.asset, _classPrivateFieldGet(this, _options)),
      exportSymbol: e.exportSymbol,
      symbol: e.symbol
    }));
  }

  traverseBundles(visit) {
    return _classPrivateFieldGet(this, _graph).traverseBundles((0, _Graph.mapVisitor)(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options)), visit));
  }

  findBundlesWithAsset(asset) {
    return _classPrivateFieldGet(this, _graph).findBundlesWithAsset((0, _Asset.assetToInternalAsset)(asset).value).map(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options)));
  }

}

exports.default = BundleGraph;

var _graph = new WeakMap();

var _options = new WeakMap();