"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BundlerOptimizeBundleGraph = exports.BundlerBundleGraph = void 0;

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _BundleGraph = _interopRequireDefault(require("../BundleGraph"));

var _Bundle = require("./Bundle");

var _Graph = require("../Graph");

var _Asset = require("./Asset");

var _utils = require("../utils");

var _Dependency = _interopRequireWildcard(require("./Dependency"));

var _Environment = require("./Environment");

var _Target = require("./Target");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

class BundlerBundleGraph {
  // InternalBundleGraph
  // ParcelOptions
  constructor(graph, options) {
    _graph.set(this, {
      writable: true,
      value: void 0
    });

    _options.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _graph, graph);

    _classPrivateFieldSet(this, _options, options);
  }

  addAssetToBundle(asset, bundle) {
    _classPrivateFieldGet(this, _graph).addAssetToBundle((0, _Asset.assetToInternalAsset)(asset).value, (0, _Bundle.bundleToInternalBundle)(bundle));
  }

  addAssetGraphToBundle(asset, bundle) {
    _classPrivateFieldGet(this, _graph).addAssetGraphToBundle((0, _Asset.assetToInternalAsset)(asset).value, (0, _Bundle.bundleToInternalBundle)(bundle));
  }

  createBundleGroup(dependency, target) {
    let dependencyNode = _classPrivateFieldGet(this, _graph)._graph.getNode(dependency.id);

    if (!dependencyNode) {
      throw new Error('Dependency not found');
    }

    let resolved = _classPrivateFieldGet(this, _graph).getDependencyResolution((0, _Dependency.dependencyToInternalDependency)(dependency));

    if (!resolved) {
      throw new Error('Dependency did not resolve to an asset');
    }

    let bundleGroup = {
      target,
      entryAssetId: resolved.id
    };
    let bundleGroupNode = {
      id: (0, _utils.getBundleGroupId)(bundleGroup),
      type: 'bundle_group',
      value: bundleGroup
    };

    _classPrivateFieldGet(this, _graph)._graph.addNode(bundleGroupNode);

    let assetNodes = _classPrivateFieldGet(this, _graph)._graph.getNodesConnectedFrom(dependencyNode);

    _classPrivateFieldGet(this, _graph)._graph.replaceNodesConnectedTo(bundleGroupNode, assetNodes);

    _classPrivateFieldGet(this, _graph)._graph.removeEdge(dependencyNode.id, resolved.id);

    _classPrivateFieldGet(this, _graph)._graph.addEdge(dependencyNode.id, bundleGroupNode.id); // Traverse upward and connect this bundle group to the bundle(s) that reference it


    let connectedFromBundles = [];

    _classPrivateFieldGet(this, _graph)._graph.traverseAncestors(dependencyNode, (node, context, actions) => {
      if (node.id === dependencyNode.id) {
        return;
      }

      if (node.type === 'bundle') {
        connectedFromBundles.push(node);
        actions.skipChildren();
      }
    });

    if (connectedFromBundles.length > 0) {
      for (let bundleNode of connectedFromBundles) {
        _classPrivateFieldGet(this, _graph)._graph.addEdge(bundleNode.id, bundleGroupNode.id, 'bundle');
      }
    } else {
      _classPrivateFieldGet(this, _graph)._graph.addEdge((0, _nullthrows.default)(_classPrivateFieldGet(this, _graph)._graph.getRootNode()).id, bundleGroupNode.id, 'bundle');
    }

    return bundleGroup;
  }

  createBundle(opts) {
    var _opts$id, _opts$entryAsset, _opts$type, _opts$env;

    let bundleId = 'bundle:' + ((_opts$id = opts.id) !== null && _opts$id !== void 0 ? _opts$id : (0, _nullthrows.default)((_opts$entryAsset = opts.entryAsset) === null || _opts$entryAsset === void 0 ? void 0 : _opts$entryAsset.id));
    let bundleNode = {
      type: 'bundle',
      id: bundleId,
      value: {
        id: bundleId,
        type: (_opts$type = opts.type) !== null && _opts$type !== void 0 ? _opts$type : (0, _nullthrows.default)(opts.entryAsset).type,
        env: (0, _Environment.environmentToInternalEnvironment)((_opts$env = opts.env) !== null && _opts$env !== void 0 ? _opts$env : (0, _nullthrows.default)(opts.entryAsset).env),
        entryAssetIds: opts.entryAsset ? [opts.entryAsset.id] : [],
        filePath: null,
        isEntry: opts.isEntry,
        target: (0, _Target.targetToInternalTarget)(opts.target),
        name: null,
        stats: {
          size: 0,
          time: 0
        }
      }
    };

    _classPrivateFieldGet(this, _graph)._graph.addNode(bundleNode);

    if (opts.entryAsset != null) {
      _classPrivateFieldGet(this, _graph)._graph.addEdge(bundleNode.id, opts.entryAsset.id);
    }

    return new _Bundle.Bundle(bundleNode.value, _classPrivateFieldGet(this, _graph), _classPrivateFieldGet(this, _options));
  }

  addBundleToBundleGroup(bundle, bundleGroup) {
    let bundleGroupId = (0, _utils.getBundleGroupId)(bundleGroup);

    _classPrivateFieldGet(this, _graph)._graph.addEdge(bundleGroupId, bundle.id);

    _classPrivateFieldGet(this, _graph)._graph.addEdge(bundleGroupId, bundle.id, 'bundle');

    for (let entryAsset of bundle.getEntryAssets()) {
      _classPrivateFieldGet(this, _graph)._graph.removeEdge(bundleGroupId, entryAsset.id);
    }
  }

  createAssetReference(dependency, asset) {
    return _classPrivateFieldGet(this, _graph).createAssetReference((0, _Dependency.dependencyToInternalDependency)(dependency), (0, _Asset.assetToInternalAsset)(asset).value);
  }

  getDependencyAssets(dependency) {
    return _classPrivateFieldGet(this, _graph).getDependencyAssets((0, _Dependency.dependencyToInternalDependency)(dependency)).map(asset => (0, _Asset.assetFromValue)(asset, _classPrivateFieldGet(this, _options)));
  }

  traverse(visit) {
    return _classPrivateFieldGet(this, _graph)._graph.filteredTraverse(node => {
      if (node.type === 'asset') {
        return {
          type: 'asset',
          value: (0, _Asset.assetFromValue)(node.value, _classPrivateFieldGet(this, _options))
        };
      } else if (node.type === 'dependency') {
        return {
          type: 'dependency',
          value: new _Dependency.default(node.value)
        };
      }
    }, visit, undefined, // start with root
    // $FlowFixMe
    _Graph.ALL_EDGE_TYPES);
  }

}

exports.BundlerBundleGraph = BundlerBundleGraph;

var _graph = new WeakMap();

var _options = new WeakMap();

class BundlerOptimizeBundleGraph extends BundlerBundleGraph {
  // InternalBundleGraph
  // ParcelOptions
  constructor(graph, options) {
    super(graph, options);

    _graph2.set(this, {
      writable: true,
      value: void 0
    });

    _options2.set(this, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldSet(this, _graph2, graph);

    _classPrivateFieldSet(this, _options2, options);
  }

  findBundlesWithAsset(asset) {
    return _classPrivateFieldGet(this, _graph2).findBundlesWithAsset((0, _Asset.assetToInternalAsset)(asset).value).map(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph2), _classPrivateFieldGet(this, _options2)));
  }

  getBundleGroupsContainingBundle(bundle) {
    return _classPrivateFieldGet(this, _graph2).getBundleGroupsContainingBundle((0, _Bundle.bundleToInternalBundle)(bundle));
  }

  getBundlesInBundleGroup(bundleGroup) {
    return _classPrivateFieldGet(this, _graph2).getBundlesInBundleGroup(bundleGroup).map(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph2), _classPrivateFieldGet(this, _options2)));
  }

  getDependenciesInBundle(bundle, asset) {
    return _classPrivateFieldGet(this, _graph2).getDependenciesInBundle((0, _Bundle.bundleToInternalBundle)(bundle), (0, _Asset.assetToInternalAsset)(asset).value).map(dep => new _Dependency.default(dep));
  }

  getTotalSize(asset) {
    return _classPrivateFieldGet(this, _graph2).getTotalSize((0, _Asset.assetToInternalAsset)(asset).value);
  }

  isAssetInAncestorBundles(bundle, asset) {
    return _classPrivateFieldGet(this, _graph2).isAssetInAncestorBundles((0, _Bundle.bundleToInternalBundle)(bundle), (0, _Asset.assetToInternalAsset)(asset).value);
  }

  removeAssetGraphFromBundle(asset, bundle) {
    _classPrivateFieldGet(this, _graph2).removeAssetGraphFromBundle((0, _Asset.assetToInternalAsset)(asset).value, (0, _Bundle.bundleToInternalBundle)(bundle));
  }

  removeAssetFromBundle(asset, bundle) {
    _classPrivateFieldGet(this, _graph2).removeAssetFromBundle((0, _Asset.assetToInternalAsset)(asset).value, (0, _Bundle.bundleToInternalBundle)(bundle));
  }

  traverseBundles(visit) {
    return _classPrivateFieldGet(this, _graph2).traverseBundles((0, _Graph.mapVisitor)(bundle => new _Bundle.Bundle(bundle, _classPrivateFieldGet(this, _graph2), _classPrivateFieldGet(this, _options2)), visit));
  }

  traverseContents(visit) {
    return _classPrivateFieldGet(this, _graph2).traverseContents((0, _Graph.mapVisitor)(node => node.type === 'asset' ? {
      type: 'asset',
      value: (0, _Asset.assetFromValue)(node.value, _classPrivateFieldGet(this, _options2))
    } : {
      type: 'dependency',
      value: new _Dependency.default(node.value)
    }, visit));
  }

}

exports.BundlerOptimizeBundleGraph = BundlerOptimizeBundleGraph;

var _graph2 = new WeakMap();

var _options2 = new WeakMap();