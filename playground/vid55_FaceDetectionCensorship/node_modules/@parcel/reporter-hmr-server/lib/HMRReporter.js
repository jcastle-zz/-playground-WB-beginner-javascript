"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _HMRServer = _interopRequireDefault(require("./HMRServer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let servers = new Map();

var _default = new _plugin.Reporter({
  async report(event, options) {
    let hot = options.hot;
    if (!hot) return;

    let hmrOptions = _objectSpread({}, hot, {
      cacheDir: options.cacheDir,
      inputFS: options.inputFS,
      outputFS: options.outputFS
    });

    let server = servers.get(hmrOptions.port);

    if (!server) {
      server = new _HMRServer.default(hmrOptions);
      servers.set(hmrOptions.port, server);
      await server.start();
    }

    if (event.type === 'buildSuccess') {
      server.emitUpdate(event);
    }

    if (event.type === 'buildFailure') {
      server.emitError(event.error);
    }
  }

});

exports.default = _default;