"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugin = require("@parcel/plugin");

var _sourceMap = _interopRequireDefault(require("@parcel/source-map"));

var _generator = _interopRequireDefault(require("@babel/generator"));

var _semver = _interopRequireDefault(require("semver"));

var _babel = _interopRequireDefault(require("./babel7"));

var _utils = require("@parcel/utils");

var _config = require("./config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _plugin.Transformer({
  async loadConfig({
    config,
    options
  }) {
    await (0, _config.load)(config, options);
  },

  rehydrateConfig({
    config,
    options
  }) {
    return (0, _config.rehydrate)(config, options);
  },

  canReuseAST({
    ast
  }) {
    return ast.type === 'babel' && _semver.default.satisfies(ast.version, '^7.0.0');
  },

  async transform({
    asset,
    config,
    options
  }) {
    // TODO: come up with a better name
    if (config === null || config === void 0 ? void 0 : config.config) {
      asset.ast = await (0, _babel.default)(asset, options, config);
    }

    return [asset];
  },

  generate({
    asset,
    options
  }) {
    let sourceFileName = (0, _utils.relativeUrl)(options.projectRoot, asset.filePath); // $FlowFixMe: figure out how to make AST required in generate method

    let generated = (0, _generator.default)(asset.ast.program, {
      sourceMaps: options.sourceMaps,
      sourceFileName: sourceFileName
    });
    return {
      code: generated.code,
      map: new _sourceMap.default(generated.rawMappings, {
        [sourceFileName]: null
      })
    };
  }

});

exports.default = _default;