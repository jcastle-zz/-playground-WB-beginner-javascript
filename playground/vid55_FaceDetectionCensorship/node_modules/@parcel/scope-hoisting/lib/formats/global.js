"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateBundleImports = generateBundleImports;
exports.generateExternalImport = generateExternalImport;
exports.generateExports = generateExports;

var t = _interopRequireWildcard(require("@babel/types"));

var _template = _interopRequireDefault(require("@babel/template"));

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

const IMPORT_TEMPLATE = (0, _template.default)('var IDENTIFIER = parcelRequire(ASSET_ID)');
const EXPORT_TEMPLATE = (0, _template.default)('parcelRequire.register(ASSET_ID, IDENTIFIER)');

function generateBundleImports(from, bundle, assets) {
  let statements = [];

  for (let asset of assets) {
    statements.push(IMPORT_TEMPLATE({
      IDENTIFIER: t.identifier(asset.meta.exportsIdentifier),
      ASSET_ID: t.stringLiteral(asset.id)
    }));
  }

  return statements;
}

function generateExternalImport() {
  throw new Error('External modules are not supported when building for browser');
}

function generateExports(bundleGraph, bundle, referencedAssets, path) {
  let exported = new Set();
  let statements = [];

  for (let asset of referencedAssets) {
    let exportsId = asset.meta.exportsIdentifier;
    (0, _assert.default)(typeof exportsId === 'string');
    exported.add(exportsId);
    statements.push(EXPORT_TEMPLATE({
      ASSET_ID: t.stringLiteral(asset.id),
      IDENTIFIER: t.identifier(asset.meta.exportsIdentifier)
    }));
  }

  let entry = bundle.getMainEntry();

  if (entry && (bundleGraph.hasParentBundleOfType(bundle, 'js') || bundle.hasChildBundles())) {
    let exportsId = entry.meta.exportsIdentifier;
    (0, _assert.default)(typeof exportsId === 'string');
    exported.add(exportsId);
    statements.push(EXPORT_TEMPLATE({
      ASSET_ID: t.stringLiteral(entry.id),
      IDENTIFIER: t.identifier(entry.meta.exportsIdentifier)
    }));
  }

  path.pushContainer('body', statements);
  return exported;
}