"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = generate;

var _generator = _interopRequireDefault(require("@babel/generator"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generate(bundleGraph, bundle, ast, options) {
  let {
    code
  } = (0, _generator.default)(ast, {
    minified: options.minify,
    comments: true // retain /*@__PURE__*/ comments for terser

  }); // $FlowFixMe

  let interpreter = bundle.target.env.isBrowser() ? null : (0, _nullthrows.default)(bundle.getMainEntry()).meta.interpreter;
  let hashBang = interpreter != null ? `#!${interpreter}\n` : '';
  let entry = bundle.getMainEntry();
  let isAsync = bundleGraph.hasParentBundleOfType(bundle, 'js') && entry;

  if (!options.minify && (isAsync || bundle.env.outputFormat === 'global')) {
    code = `\n${code}\n`;
  } // Wrap async bundles in a closure and register with parcelRequire so they are executed
  // at the right time (after other bundle dependencies are loaded).


  let contents = '';

  if (isAsync && bundle.env.outputFormat === 'global') {
    contents = `${hashBang}parcelRequire.registerBundle(${JSON.stringify((0, _nullthrows.default)(entry).id)},function(){${code}});`;
  } else {
    contents = bundle.env.outputFormat !== 'global' ? hashBang + code : `${hashBang}(function(){${code}})();`;
  }

  return {
    contents
  };
}