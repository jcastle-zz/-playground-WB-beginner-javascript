"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MockPackageInstaller = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = require("@parcel/fs");

var _utils = require("@parcel/utils");

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This PackageInstaller implementation simply copies files from one filesystem to another.
// Mostly useful for testing purposes.
class MockPackageInstaller {
  constructor() {
    _defineProperty(this, "packages", new Map());
  }

  register(packageName, fs, packagePath) {
    this.packages.set(packageName, {
      fs,
      packagePath
    });
  }

  async install({
    modules,
    fs,
    cwd,
    packagePath,
    saveDev = true
  }) {
    if (packagePath == null) {
      packagePath = _path.default.join(cwd, 'package.json');
      await fs.writeFile(packagePath, '{}');
    }

    let pkg = JSON.parse((await fs.readFile(packagePath, 'utf8')));
    let key = saveDev ? 'devDependencies' : 'dependencies';

    if (!pkg[key]) {
      pkg[key] = {};
    }

    for (let module of modules) {
      pkg[key][module] = '^' + (await this.installPackage(module, fs, packagePath));
    }

    await fs.writeFile(packagePath, JSON.stringify(pkg));
  }

  async installPackage(packageName, fs, packagePath) {
    let pkg = this.packages.get(packageName);

    if (!pkg) {
      throw new Error('Unknown package ' + packageName);
    }

    let dest = _path.default.join(_path.default.dirname(packagePath), 'node_modules', packageName);

    await (0, _fs.ncp)(pkg.fs, pkg.packagePath, fs, dest);
    let packageJSON = JSON.parse((await fs.readFile(_path.default.join(dest, 'package.json'), 'utf8')));
    let deps = packageJSON.dependencies || {};

    for (let dep in deps) {
      await this.installPackage(dep, fs, packagePath);
    }

    return packageJSON.version;
  }

}

exports.MockPackageInstaller = MockPackageInstaller;
(0, _utils.registerSerializableClass)(`${_package.default.version}:MockPackageInstaller`, MockPackageInstaller);