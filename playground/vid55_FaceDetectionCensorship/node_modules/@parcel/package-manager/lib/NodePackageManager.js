"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodePackageManager = void 0;

var _installPackage = require("./installPackage");

var _path = _interopRequireWildcard(require("path"));

var _utils = require("@parcel/utils");

var _package = _interopRequireDefault(require("../package.json"));

var _module = _interopRequireDefault(require("module"));

var _fs = _interopRequireDefault(require("fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This implements a package manager for Node by monkey patching the Node require
// algorithm so that it uses the specified FileSystem instead of the native one.
// It also handles installing packages when they are required if not already installed.
// See https://github.com/nodejs/node/blob/master/lib/internal/modules/cjs/loader.js
// for reference to Node internals.
class NodePackageManager {
  constructor(fs, installer) {
    _defineProperty(this, "fs", void 0);

    _defineProperty(this, "installer", void 0);

    _defineProperty(this, "cache", new Map());

    this.fs = fs;
    this.installer = installer;
  }

  static deserialize(opts) {
    return new NodePackageManager(opts.fs, opts.installer);
  }

  serialize() {
    return {
      $$raw: false,
      fs: this.fs,
      installer: this.installer
    };
  }

  async require(name, from) {
    let {
      resolved
    } = await this.resolve(name, from);
    return this.load(resolved, from);
  }

  requireSync(name, from) {
    let {
      resolved
    } = this.resolveSync(name, from);
    return this.load(resolved, from);
  }

  load(resolved, from) {
    if (!_path.default.isAbsolute(resolved)) {
      // Node builtin module
      // $FlowFixMe
      return require(resolved);
    }

    let filePath = this.fs.realpathSync(resolved);
    const cachedModule = _module.default._cache[filePath];

    if (cachedModule !== undefined) {
      return cachedModule.exports;
    }

    let m = new _module.default(filePath, _module.default._cache[from] || module.parent);
    _module.default._cache[filePath] = m; // Patch require within this module so it goes through our require

    m.require = id => {
      return this.requireSync(id, filePath);
    }; // Patch `fs.readFileSync` temporarily so that it goes through our file system


    let readFileSync = _fs.default.readFileSync; // $FlowFixMe

    _fs.default.readFileSync = (filename, encoding) => {
      // $FlowFixMe
      _fs.default.readFileSync = readFileSync;
      return this.fs.readFileSync(filename, encoding);
    };

    try {
      m.load(filePath);
    } catch (err) {
      delete _module.default._cache[filePath];
      throw err;
    }

    return m.exports;
  }

  async resolve(name, from, triedInstall = false) {
    let basedir = (0, _path.dirname)(from);
    let key = basedir + ':' + name;
    let resolved = this.cache.get(key);

    if (!resolved) {
      try {
        resolved = await (0, _utils.resolve)(this.fs, name, {
          basedir,
          extensions: Object.keys(_module.default._extensions)
        });
      } catch (e) {
        if (e.code === 'MODULE_NOT_FOUND' && !triedInstall) {
          await this.install([name], from);
          return this.resolve(name, from, true);
        }

        throw e;
      }

      this.cache.set(key, resolved);
    }

    return resolved;
  }

  resolveSync(name, from) {
    let basedir = (0, _path.dirname)(from);
    return (0, _utils.resolveSync)(this.fs, name, {
      basedir,
      extensions: Object.keys(_module.default._extensions)
    });
  }

  async install(modules, from, opts) {
    await (0, _installPackage.installPackage)(this.fs, modules, from, _objectSpread({
      packageInstaller: this.installer
    }, opts));
  }

}

exports.NodePackageManager = NodePackageManager;
(0, _utils.registerSerializableClass)(`${_package.default.version}:NodePackageManager`, NodePackageManager);