{"version":3,"sources":["shopping.js"],"names":["shoppingForm","document","querySelector","list","items","handleSubmit","e","preventDefault","name","currentTarget","item","value","id","Date","now","complete","push","target","reset","dispatchEvent","CustomEvent","displayItems","html","map","join","innerHTML","mirrorToLocalStorage","localStorage","setItem","JSON","stringify","restoreFromLocalStorage","lsItems","parse","getItem","length","deleteItem","filter","markAsComplete","itemRef","find","addEventListener","matches","parseInt"],"mappings":"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","file":"shopping.3c459b95.js","sourceRoot":"..","sourcesContent":["// Topics: Custom events, Event delegation, Local storage, DOM events, Object reference\nconst shoppingForm = document.querySelector('.shopping');\nconst list = document.querySelector('.list');\n\n// We need an array to hold our state. State means a bunch of data that reflects the state of your application. Here it is a list of items, how many of each item, how expensive, coupons, etc. You should always be able to recreate application given the data. It should be reflected in object or array.\nlet items = [];\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n  const name = e.currentTarget.item.value;\n  if (!name) return;\n\n  const item = {\n    name,\n    id: Date.now(),\n    complete: false,\n  };\n  // Push the items into state\n  items.push(item);\n  // Clear the form\n  e.target.reset();\n  // Fire off custom event to tell anyone else who cares that the items have been updated.\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\n// Now we need to display our items.\nfunction displayItems() {\n  const html = items\n    .map(\n      item => `<li class=\"shopping-item\">\n        <input\n          value=\"${item.id}\"\n          type=\"checkbox\"\n          ${item.complete && 'checked'}\n        >\n        <span class=\"itemName\">${item.name}</span>\n        <button\n          aria-label=\"Remove ${item.name}\"\n          value=\"${item.id}\"\n        >&times;</button aria-label=\"Remove>\n    </li>`\n    )\n    .join('');\n  list.innerHTML = html;\n}\n\n// Save data in local storage\nfunction mirrorToLocalStorage() {\n  localStorage.setItem('items', JSON.stringify(items));\n}\n\n// Bring data back from local storage\nfunction restoreFromLocalStorage() {\n  // pull the items from LS\n  const lsItems = JSON.parse(localStorage.getItem('items'));\n  if (lsItems.length) {\n    // items = lsItems;\n    // lsItems.forEach(item => items.push(item));\n    // items.push(lsItems[0], lsItems[1]);\n    items.push(...lsItems);\n    list.dispatchEvent(new CustomEvent('itemsUpdated'));\n  }\n}\n\nfunction deleteItem(id) {\n  // update our items array without this one\n  items = items.filter(item => item.id !== id);\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nfunction markAsComplete(id) {\n  const itemRef = items.find(item => item.id === id);\n  itemRef.complete = !itemRef.complete;\n  list.dispatchEvent(new CustomEvent('itemsUpdated'));\n}\n\nshoppingForm.addEventListener('submit', handleSubmit);\nlist.addEventListener('itemsUpdated', displayItems);\nlist.addEventListener('itemsUpdated', mirrorToLocalStorage);\n// Event Delegation: We listen or the click on the list <ul> but then delegate the click over to the button if that is what was clicked.\nlist.addEventListener('click', function(e) {\n  if (e.target.matches('button')) {\n    deleteItem(parseInt(e.target.value));\n  }\n});\n\nrestoreFromLocalStorage();\n"]}